class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UF uf = new UF(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        int res = 0;
        int max = 0;
        // for (int i : uf.parents)
        //     System.out.print(i + " ");
        // System.out.println("");
        // for (int i : uf.size)
        //     System.out.print(i + " ");

        for (int i : initial) {
            int cur = uf.size[uf.find(i)];
            if (cur > max) {
                max = cur;
                res = i;
            } else if (cur == max && i < res) {
                res = i;
            }
        }
        return res;
    }
    
}

class UF {
    int[] size;
    int[] parents;
    
    public UF(int n) {
        size = new int[n];
        parents = new int[n];
        for (int i = 0; i < n; i++) {
            size[i] = 1;
            parents[i] = i;
        }
    }
    
    public int find(int i) {
        while (i != parents[i]) {
            parents[i] = parents[parents[i]];
            i = parents[i];
        }
        return i;
    }
    
    public void union(int p, int q) {
        int i = find(p);
        int j = find(q);
        if (i == j) return;
        // parents[j] = i; 
        // size[i] += size[j];
        
        if (size[i] < size[j]) { // weighting
            parents[i] = j; 
            size[j] += size[i]; 
        } else { 
            parents[j] = i; 
            size[i] += size[j]; 
        }
    }
}
