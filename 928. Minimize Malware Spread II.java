
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;        
        int res = 0;
        int min = Integer.MAX_VALUE;
        for (int i : initial) {
            UF uf = new UF(n);
            for (int p = 0; p < n; p++) {
                for (int q = 0; q < n; q++) {
                    if (p == i || q == i) continue;
                    if (graph[p][q] == 1) uf.union(p, q);
                }
            }
            int sum = 0;
            Set<Integer> visited = new HashSet<>();
            for (int j : initial) {
                if (j == i) continue;
                int parent = uf.find(j);
                if (!visited.add(parent)) continue;
                sum += uf.size[parent];
            }
            //System.out.println(i + ":"+sum);
            if (sum < min) {
                min = sum;
                res = i;
            }
            if (min == sum) {
                res = Math.min(res, i);
            }
        }
        return res;
    }
}

class UF {
    int[] size;
    int[] parents;

    public UF(int n) {
        size = new int[n];
        parents = new int[n];
        for (int i = 0; i < n; i++) {
            size[i] = 1;
            parents[i] = i;
        }
    }

    public int find(int i) {
        while (i != parents[i]) {
            parents[i] = parents[parents[i]];
            i = parents[i];
        }
        return i;
    }

    public void union(int p, int q) {
        int i = find(p);
        int j = find(q);
        if (i == j) return;
        // parents[j] = i; 
        // size[i] += size[j];

        if (size[i] < size[j]) { // weighting
            parents[i] = j; 
            size[j] += size[i]; 
        } else { 
            parents[j] = i; 
            size[i] += size[j]; 
        }
    }
}
